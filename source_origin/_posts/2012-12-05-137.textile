---
layout: post
title: 'Reactor parttern'
date: 2012-12-5
wordpress_id: 137
permalink: /blogs/137
comments: true
---
<p><strong>handle(句柄):</strong></p> <p>一个网络连接或文件描述符可视为一个句柄。我们需要监听的发生在这些句柄上的事件。</p> <p>&nbsp;</p> <p><strong>synchronous event demultiplexer（同步事件复用器）</strong></p> <p>用于阻塞式监听我们关心的一系列句柄。当我们关心的事件发生在相关句柄上时，会返回。一个常用的I/O事件复用器是select系统调用。</p> <p>&nbsp;</p><strong>initiation dispatcher(分发器）</strong>  <p>提供注册，删除接口，并负责派发Event Handler。上面的Synchronous Event Demultiplexer等待事件的发生，当检测到新的事件，就把事件交给Initiation Dispatcher，它去回调相应的Event Handler。</p> <p><strong>event handler(事件处理接口)</strong></p> <p>定义一个抽象接口，包含一个钩子方法，实现特定服务的派发操作。钩子方法必须由具体业务去实现。</p> <p><strong>concrect event handler(具体处理接口）</strong></p> <p>继承上面的类，根据具体的业务实现钩子方法。业务应用注册concrect event handler到initiation dispatcher以处理特定的事件。当这些事件发生时，initiation dispatcher会回调正确地这些钩子方法。</p> <p>&nbsp;</p> <p>reactor模式的结构组成可以通过下面的OMT类图来阐述：</p> <p><a href="http://www.minlh.tk/uploads/2012/12/reactor_omt.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="reactor_omt" border="0" alt="reactor_omt" src="http://www.minlh.tk/uploads/2012/12/reactor_omt_thumb.jpg" width="569" height="371"></a></p> <p>&nbsp;</p> <p>当业务应用注册一个concrect event handler到initiation dispatcher时，并在initiation dispatcher中指定一些它关心的事件，以便事件发生时initiation dispatcher能通知这个event handler。</p> <p>initiation dispatcher要求每个event handler回传句柄给它，这个句柄用来标识event handler。</p> <p>&nbsp;</p> <p>所有event handler注册完后，应用程序调用handle_events开始initiation dispatcher的事件循环，initiation dispatcher会使用synchronous event demultiplexer去监听这些句柄。当句柄相应的事件发生时，synchronous event demultiplexer会通知initiation dispatcher。</p> <p>initiation dispatcher触发event handler钩子方法去处理准备好的事件。事件发生时，initiation dispatcher会使用由事件源激活的handles为KEY去定位和分派相应的event handle的钩子方法。</p> <p>&nbsp;</p> <p>在reactor模式中，各组成构件与应用的交互图如下：</p> <p><a href="http://www.minlh.tk/uploads/2012/12/reactor_iteration.jpg"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="reactor_iteration" border="0" alt="reactor_iteration" src="http://www.minlh.tk/uploads/2012/12/reactor_iteration_thumb.jpg" width="515" height="300"></a></p> <p>&nbsp;</p> ## 实现： <p><strong>1：选择同步事件复用器机制</strong></p> <p>一般使用系统提供的接口，如：select。一般来说，同步事件复用器都是基于系统提供的机制，而不是由模式开发者去实现。</p> <p><strong>2：开发initiation dispatcher</strong></p> <p>下面是开发initiation dispatcher的必要步骤：</p> <ul> <li>实现event handler表：</li></ul> <p>initiation dispatcher维护着一张concrecte event handler。initiation dispatcher要提供注册和删除event handler的接口。</p> <ul> <li>实现事件循环进入点：</li></ul> <p>这个进入点提供handle_events的接口，此接口使用synchronous event demultiplexer负责handle的复用，和实行event handler的派发。</p> <p>&nbsp;</p> <ul> <li>处理好必要的同步机制：</li></ul> <p>要考虑同一个initiation dispatcher给多个线程同时使用的同步问题</p> <p><strong>3：确定派发目标的类型：</strong></p> <p>event handle objects:使用对象</p> <p>event handle functions:使用函数</p> ## 4：定义event handling 接口 <p>单方法接口：event handle只提供一个接口，内部根据事件类型switch，分派给具体的接口处理。</p> <p>多方法接口：由框架实现者根据事件类型直接调用相应的具体接口。</p> <p>&nbsp;</p> <p><strong><font color="#000000">5：确定应用程序中initiation dispatcher的数量</font></strong></p> <p>&nbsp;</p>   <p><strong><font color="#000000">6：实现concrecte event handlers</font></strong></p> <p><font color="#000000"></font></p>
