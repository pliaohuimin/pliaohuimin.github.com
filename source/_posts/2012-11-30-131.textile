---
layout: post
title: '部署系统参考'
date: 2012-11-30
wordpress_id: 131
permalink: /blogs/131
comments: true
---
<h3><a name="_Toc342068115">前置条件：</a></h3> <h4><a name="_Toc342068116">部署前需要安装软件</a></h4> <h5><a name="_Toc342068117">Apache</a></h5> <p>需要软件包：httpd-2.2.20.tar.gz <p><b>步骤</b> <p>Setp 1: tar xzvf httpd-2.2.20.tar.gz <p>Step 2: cd httpd-2.2.20 <p>Step 3: ./configure <p>Step 4: make <p>Step 5: make install <p>done <h5><a name="_Toc342068118">Mysql-server</a></h5> <p>Step 1: yum install mysql-server <p>Done <h5><a name="_Toc342068119">Libevent</a></h5> <p>需要软件包：libevent-2.0.19-stable.tar.gz <p><b>步骤</b> <p>Step 1: tar xzvf libevent-2.0.19-stable.tar.gz <p>Step 2: cd libevent-2.0.19-stable <p>Step 3: ./configure <p>Step 4: make <p>Step 5: make install <p>done <h5><a name="_Toc342068120">Libmemcached</a></h5> <p>需要软件包：libmemcached-1.0.4.tar.gz <p><b>步骤：</b> <p>Step 1: tar xzvf libmemcached-1.0.4.tar.gz <p>Step 2: cd libmemcached-1.0.4 <p>Step 3: ./configure <p>Step 4: make <p>Step 5: make install <p>done <h5><a name="_Toc342068121">Memcached</a></h5> <p>需要软件包：memcached-1.4.13.tar.gz <p><b>步骤：</b> <p>Step 1: tar xzvf memcached-1.4.13.tar.gz <p>Step 2: cd memcached-1.4.13 <p>Step 3: ./configure <p>Step 4: make <p>Step 5: make install <p>done <h5><a name="_Toc342068122">Libxml</a></h5> <p>需要软件包：libxml2-2.7.4.tar.gz <p><b>步骤：</b> <p>Step 1: tar xzvf libxml2-2.7.4.tar.gz <p>Step 2: cd libxml2-2.7.4 <p>Step 3: ./configure <p>Step 4: make <p>Step 5: make install <p>done <h5><a name="_Toc342068123">PHP</a>：</h5> <p>需要软件包：php-5.2.17.tar.gz <p><b>步骤：</b> <p>Step 1: tar xzvf php-5.2.17.tar.gz <p>Step 2: cd php-5.2.17 <p>Step 3: ./configure --prefix=/usr/local/php5 --with-apxs2=/usr/local/apache2/bin/apxs --with-config-file-path=/usr/local/lib --enable-track-vars --with-xml --with-MySQL <p>Step 4: make <p>Step 5: make install <p>done <h5><a name="_Toc342068124">其它库文件：</a></h5> <p>需要软件包：lib_extra.tar.gz <p><b>步骤：</b> <p>Step 1: mkdir lib_extra <p>Step 2: cd lib_extra <p>Step 3: tar xzvf ../lib_extra.tar.gz <p>Step 4: cp * /usr/local/lib/ <p>Step 5: cd /usr/local/lib/ <p>Step 6: ln -s libbsoncpp.so.0.0.1 libbsoncpp.so.0 <p>Step 7: ln -s libboost_thread.so.1.48.0 libboost_thread.so.2 <p>done <h5><a name="_Toc342068125">Sandbox</a></h5> <p>需要软件包： sandbox.tar.gz <p><b>步骤：</b> <p>Step 1: tar xzvf soft/sandbox.tar.gz <p>done <h4><a name="_Toc342068126">相关设置和测试：</a></h4> <h5><a name="_Toc342068127">Apache</a></h5> <p>开启apache服务： <p>/usr/local/apache2/bin/httpd start <p>开放80端口： <p>iptables -I INPUT -p tcp --dport 80 -j ACCEPT <p>测试： <p>在浏览器打开： <p><a href="http://localhost">http://localhost</a> <p>看到It Works字样表示安装成功。 <h5><a name="_Toc342068128">Mysql:</a></h5> <p><b>启动mysqld</b><b>服务</b>： <p>Service mysqld start <p><b>测试：</b> <p>Mysql –u root <p>出现下列字样表示可正常使用： <p>Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. <p>mysql&gt; <p><b></b> <p><b>创建新数据库</b> <p>在mysql&gt;提示符后面输入： <p>create database zhetian; <p><b>设置root</b><b>用户密码：</b> <p>程序创建数据库脚本要求用户需要密码登录，默认使用root用户，密码为root <p>下面为root用户设置密码root的shell指令： <p>mysqladmin –u root passward “root” <h5><a name="_Toc342068129">其它库文件：</a></h5> <p><b>设置环境：</b> <p>Step 1: vi ~/.bash_profile <p>Step 2: <p>添加以下脚本： <p>LD_LIBRARY_PATH=/usr/local/lib/ <p>PATH=$PATH:$HOME/bin:/usr/local/monogodb/bin: <p>export PATH <p>export LD_LIBRARY_PATH <p>step 3: <p>回到shell环境: <p>:w <p>Step 4: <p>. .bash_profile <h5><a name="_Toc342068130">Sandbox</a></h5> <p>开启843沙箱端口： <p>iptables -I INPUT -p tcp --dport 843 -j ACCEPT <p>启动程序： <p>./sbserver ../conf/sbserver <h3><a name="_Toc342068131">部署程序</a></h3> <h4><a name="_Toc342068132">后端服务：</a></h4> <p>需要软件包：ztzserver_alphax.xx.xx_build112801.tar.gz <p><b>步骤：</b> <p>Step 1: tar xzvf ztzserver_alphax.xx.xx_build112801.tar.gz <p>Step 2: cd server_mysql <p>Step 3:  <p>创建数据库 <p>sh create_database.sh <p>Step 4: <p>修改各程序相应的配置文件，主要修改里面的IP和端口配置。具体修改在这里就不详说了。 <p>Step 5: <p>修改启动脚本restart_servers.sh: <p>如果是使用root用户执行该脚本，需要在memcached执行一行后面添加: -u root <p>如果是使用其它用户，则无需修改，直接跳过此步骤 <p>Step 6: <p>执行启动脚本restart_servers.sh: <p>Sh restart_servers.sh <p>Step 7: <p>开启相关服务端口，主要是登录服务器对外端口和宙斯服务器对外端口，如18100,18810： <p>iptables -I INPUT -p tcp --dport 18810 -j ACCEPT <p>iptables -I INPUT -p tcp --dport 18100 -j ACCEPT <h4><a name="_Toc342068133">前端服务：</a></h4> <p>需要软件包：ztzclient_1130.tar.gz <p><b>步骤：</b> <p>Step 1: 使用cd指令切换当前目录到apache的根目录，默认为/usr/local/apache2/htdocs <p>Step 2: 创建目录存放前端资源，目录名可自定。如： <p>mkdir ztzclient <p>Step 3: cd ztzclient <p>Step 4: 拷贝ztzclient_1130.tar.gz到当前目录 <p>Step 5: tar xzvf ztzclient_1130.tar.gz <p>step 6: 修改httpd.conf <p>l 打开httpd.conf文件： vi /usr/local/apache2/conf/httpd.conf <p>l 找到标签： &lt;Directory /&gt; <p>l 将内部Options FollowSymLinks， Deny from all屏蔽，屏蔽后内容如下： <p>&lt;Directory /&gt; <p>#Options FollowSymLinks <p>AllowOverride None <p>Order deny,allow <p>#Deny from all <p>&lt;/Directory&gt; <h4><a name="_Toc342068134">php</a>支持：</h4> <p><b>步骤：</b> <p>step 1: 创建新系统用户。apache要求php脚本必须存放在非root用户目录下。以下指定创建用户名为ztz，密码为ztz的用户： <p>useradd ztz –pztz <p>step 2: 打开httpd.conf配置文件。vi /usr/local/apache2/conf/httpd.conf <p>step 3: 修改用户信息 <p>查找下列信息： User daemon，Group daemon，将其中的daemon改成刚新创建的用户。 <p>step 4:  <p>查找下列信息：DocumentRoot "/usr/local/apache2/htdocs" <p>将其中的/usr/local/apache2/htdocs替换成php脚本存放的目录。如/home/ztz/www <p>step 5: <p>查找到下列信息：&lt;Directory "/usr/local/apache2/htdocs"&gt; <p>将其中的/usr/local/apache2/htdocs替换成php脚本存放的目录。如/home/ztz/www <p>step 6: <p>查找到下列信息：Options Indexes FollowSymLinks <p>将其用#屏蔽。效果如下： <p>#Options Indexes FollowSymLinks <p>并在下面一行添加： <p>Options FollowSymLinks MultiViews <p>step 7: <p>查找到下列信息：&lt;IfModule dir_module&gt; <p>将下列信息： <p>DirectoryIndex index.html <p>替换成： <p>DirectoryIndex index.html index.shtml index.cgi index.php index.phtml index.php <p>step 8: <p>查找到下列标签：&lt;IfModule mime_module&gt; <p>在该标签里面的 AddType application/x-gzip .gz .tgz下，添加下面两行代码： <p>AddType application/x-httpd-php .php .php3 .phtml .inc <p>AddType application/x-httpd-php-source .phps <h4><a name="_Toc342068135">php sockets </a>支持：</h4> <p>需要文件：php.ini <p><b>步骤：</b> <p>step 1: 使用cd命令将当前目录切换到进入PHP源代码目录下的ext/sockets目录，如： <p>cd /root/soft/ php-5.2.17/ext/sockets <p>step 2: 执行php安装目录bin目录下的phpize指令。如： <p>{% codeblock %}/usr/{% endcodeblock %}local{% codeblock %}/php5/bin/phpize{% endcodeblock %} <p>{% codeblock %}step 3:{% endcodeblock %} {% codeblock %}./configure --with-php-config=/usr/local/php5/bin/php-config{% endcodeblock %} <p>{% codeblock %}step 4: make{% endcodeblock %} <p>{% codeblock %}step 5: make install{% endcodeblock %} <p>{% codeblock %}step 6: {% endcodeblock %}{% codeblock %}找出sockets.so动态库所在目录。一般在/usr/local/php5/lib/php/extensions/下。将查找到的完整路径替换到（如果找不到extension对应的位置，可直接在default_socket_timeout信息下一行添加）php.ini中对应位置。{% endcodeblock %} <p>{% codeblock %}如将 {% endcodeblock %} <p>{% codeblock %}extension="/usr/local/php5/lib/php/extensions/no-debug-zts-20090626/sockets.so"{% endcodeblock %} <p>{% codeblock %}替换成{% endcodeblock %} <p>{% codeblock %}extension="/usr/local/php5/lib/php/extensions/no-debug-non-zts-20060613/sockets.so"{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <h4><a name="_Toc342068136">{% codeblock %}php mysql{% endcodeblock %}</a>{% codeblock %}支持：{% endcodeblock %}{% codeblock %}{% endcodeblock %}</h4> <p>{% codeblock %}{% endcodeblock %} <p><b>步骤：</b> <p>step 1:  <p>使用cd命令将当前目录切换到进入PHP源代码目录下的ext/mysql目录，如： <p>cd /root/soft/php-5.2.17/ext/mysql <p>step 2:  <p>执行php安装目录bin目录下的phpize指令。如： <p>{% codeblock %}/usr/{% endcodeblock %}local{% codeblock %}/php5/bin/phpize{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}step 3:{% endcodeblock %} <p>{% codeblock %}./configure --with-php-config=/usr/local/php5/bin/php-config{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}step 4: {% endcodeblock %} <p>{% codeblock %}make{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}step 5: {% endcodeblock %} <p>{% codeblock %}make install{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}step 6: {% endcodeblock %} <p>{% codeblock %}找出sockets.so动态库所在目录。一般在/usr/local/php5/lib/php/extensions/下。将查找到的完整路径替换到（如果找不到extension对应的位置，可直接在default_socket_timeout信息下一行添加）php.ini中对应的目录。{% endcodeblock %} <p>{% codeblock %}如将 {% endcodeblock %} <p>{% codeblock %}extension="/usr/local/php5/lib/php/extensions/no-debug-zts-20090626/mysql.so"{% endcodeblock %} <p>{% codeblock %}替换成{% endcodeblock %} <p>{% codeblock %}extension="/usr/local/php5/lib/php/extensions/no-debug-non-zts-20060613/mysql.so"{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}<b>step 3</b>{% endcodeblock %}{% codeblock %}<b>报错解决方法：</b>{% endcodeblock %} <p>{% codeblock %}报错1：{% endcodeblock %} <p>{% codeblock %}当执行step 3时，可能会报错：{% endcodeblock %} <p>configure: error: Cannot find MySQL header files under /date/mysql.<br>Note that the MySQL client library is not bundled anymore! <p>{% codeblock %}解决方法是安装mysql-devel。{% endcodeblock %} <p>{% codeblock %}yum install mysql-devel{% endcodeblock %} <p>{% codeblock %}报错2：{% endcodeblock %} <p>{% codeblock %}{% endcodeblock %} <p>{% codeblock %}再次执行。如果遇到如下报错：{% endcodeblock %} <p>{% codeblock %}configure: error: Try adding --with-zlib-dir=&lt;DIR&gt;. Please check config.log for more information.{% endcodeblock %} <p>{% codeblock %}可尝试用以下方法解决：{% endcodeblock %} <p>1. cd /usr/lib <p>2. mv mysql/ mysql.bak/ <p>{% codeblock %}3. {% endcodeblock %}{% codeblock %}ln -s /usr/lib64/mysql /usr/lib/mysql{% endcodeblock %}</p>
