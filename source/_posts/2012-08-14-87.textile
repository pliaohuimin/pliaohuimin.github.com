---
layout: post
title: '(转）linux下多线程 之 pthread_detach(pthread_self())'
date: 2012-8-14
wordpress_id: 87
permalink: /blogs/87
comments: true
---
<p><a href="http://blog.csdn.net/Lethe1989/article/details/5191165">转自：http://blog.csdn.net/Lethe1989/article/details/5191165</a></p> <p>多线程稍微看了下还能接受没想象中的难，写了个示例程序运行修改运行修改几遍后也大致明白了。<br>写个碰到的问题，记录下自己的技术之路点滴<br>pthread_detach(pthread_self())<br>linux线程执行和windows不同，pthread有两种状态joinable状态和unjoinable状态，<br>如果线程是joinable状态，当线程函数自己返回退出时或pthread_exit时都不会释放线程所占用堆栈和线程描述符（总计8K多）。只有当你调用了pthread_join之后这些资源才会被释放。<br>若是unjoinable状态的线程，这些资源在线程函数退出时或pthread_exit时自动会被释放。<br>unjoinable属性可以在pthread_create时指定，或在线程创建后在线程中pthread_detach自己, 如：pthread_detach(pthread_self())，将状态改为unjoinable状态，确保资源的释放。或者将线程置为 joinable,然后适时调用pthread_join.<br>摘自&nbsp; http://kb.cnblogs.com/a/1285801/ <p>其实简单的说就是在线程函数头加上 pthread_detach(pthread_self())的话，线程状态改变，在函数尾部直接 pthread_exit线程就会自动退出。省去了给线程擦屁股的麻烦</p>
