<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: IT | Min's Lounger]]></title>
  <link href="http://pliaohuimin.github.io/blog/categories/it/atom.xml" rel="self"/>
  <link href="http://pliaohuimin.github.io/"/>
  <updated>2014-09-09T14:36:57+08:00</updated>
  <id>http://pliaohuimin.github.io/</id>
  <author>
    <name><![CDATA[Mr.Liao]]></name>
    <email><![CDATA[pliaohuimin@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Doxygen生成文档]]></title>
    <link href="http://pliaohuimin.github.io/blog/20140909/use-doxygen/"/>
    <updated>2014-09-09T14:20:00+08:00</updated>
    <id>http://pliaohuimin.github.io/blog/20140909/use-doxygen</id>
    <content type="html"><![CDATA[<h4>在写代码时，使用doxygen vim插件生成特定格式的说明。</h4>

<h4>进入项目目录（test为例说明） cd test/</h4>

<h4>生成配置文件                          Doxygen –g</h4>

<p>note: 默认生成的配置文件名为 &ldquo;Doxyfile"，也可以采用 "doxygen -g your-cfg-filename&rdquo; 命令格式指定所生成的配置文件名。如无特殊需要，采用默认的配置文件名即可。</p>

<h4>配置文件的相应设置 ，这里已经有个模板Doxyfile(test文件夹下)，可以根据需要更改相应设置</h4>

<ul>
<li><p>项目名称，将作为于所生成的程序文档首页标题</p>

<blockquote><p>PROJECT_NAME           = Test</p></blockquote></li>
<li><p>文档版本号，可对应于项目版本号，譬如 svn、cvs 所生成的项目版本号</p>

<blockquote><p>PROJECT_NUMBER       = 1.0.0</p></blockquote></li>
<li><p>程序文档输出目录</p>

<blockquote><p>OUTPUT_DIRECTORY    =  doc/</p></blockquote></li>
<li><p>程序文档语言环境</p>

<blockquote><p>OUTPUT_LANGUAGE    = Chinese</p></blockquote></li>
<li><p>如果是制作 C 程序文档，该选项必须设为 YES，否则默认生成 C++ 文档格式</p>

<blockquote><p>OPTIMIZE_OUTPUT_FOR_C  = YES</p></blockquote></li>
<li><p>对于使用 typedef 定义的结构体、枚举、联合等数据类型，只按照 typedef 定义的类型名进行文档化</p>

<blockquote><p>TYPEDEF_HIDES_STRUCT   = YES</p></blockquote></li>
<li><p>在 C++ 程序文档中，该值可以设置为 NO，而在 C 程序文档中，由于 C 语言没有所谓的域/名字空间这样的概念，所以此处设置为 YES</p>

<blockquote><p>HIDE_SCOPE_NAMES        = YES</p></blockquote></li>
<li><p>让 doxygen 静悄悄地为你生成文档，只有出现警告或错误时，才在终端输出提示信息</p>

<blockquote><p>QUIET   = YES</p></blockquote></li>
<li><p>只对头文件中的文档化信息生成程序文档</p>

<blockquote><p>FILE_PATTERNS          = *.h</p></blockquote></li>
<li><p>递归遍历当前目录的子目录，寻找被文档化的程序源文件</p>

<blockquote><p>RECURSIVE              = YES</p></blockquote></li>
<li><p>示例程序目录</p>

<blockquote><p>EXAMPLE_PATH           = example/</p></blockquote></li>
<li><p>示例程序的头文档 (.h 文件) 与实现文档 (.c 文件) 都作为程序文档化对象</p>

<blockquote><p>EXAMPLE_PATTERNS       = <em>.c </em>.h</p></blockquote></li>
<li><p>递归遍历示例程序目录的子目录，寻找被文档化的程序源文件</p>

<blockquote><p>EXAMPLE_RECURSIVE      = YES</p></blockquote></li>
<li><p>允许程序文档中显示本文档化的函数相互调用关系</p>

<blockquote><p>REFERENCED_BY_RELATION = YES
REFERENCES_RELATION    = YES
REFERENCES_LINK_SOURCE = YES</p></blockquote></li>
<li><p>不生成 latex 格式的程序文档</p>

<blockquote><p>GENERATE_LATEX         = NO</p></blockquote></li>
<li><p>在程序文档中允许以图例形式显示函数调用关系，前提是你已经安装了 graphviz 软件包</p>

<blockquote><p>HAVE_DOT               = YES
CALL_GRAPH            = YES
CALLER_GRAPH        = YES</p></blockquote></li>
<li><p>让doxygen从配置文件所在的文件夹开始，递归地搜索所有的子目录及源文件</p>

<blockquote><p>RECURSIVE = YES</p></blockquote></li>
<li><p>在最后生成的文档中，把所有的源代码包含在其中</p>

<blockquote><p>SOURCE BROWSER = YES</p></blockquote></li>
<li><p>这会在HTML文档中，添加一个侧边栏，并以树状结构显示包、类、接口等的关系</p>

<blockquote><p>GENERATE TREEVIEW ＝ ALL</p></blockquote></li>
</ul>


<h4>程序文档生成</h4>

<p>现在开始生成程序文档，将终端的工作目录定位在 test 目录，然后键入：</p>

<blockquote><p>$ doxygen    your-cfg-filename</p></blockquote>

<p>your-cfg-filename 是  Doxygen 配置文件名，如果是使用 &ldquo;doxygen -g&rdquo; 生成的配置文件——Doxyfile，那么可以在终端里仅键入 &ldquo;doxygen&rdquo; 命令即可生成程序文档。<br/>
生成的文档位于 test/doc/html 目录中，使用浏览器打开该目录中的 index.html 文件，即可看到自己的工作成果。</p>
]]></content>
  </entry>
  
</feed>
